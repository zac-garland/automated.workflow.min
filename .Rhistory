install.packages("tidyquant")
library(tidyquant)
tidyquant::tq_index_options()
sp_500 <- tidyquant::tq_index("SP500")
sp_500
sp_500 <- tidyquant::tq_index("DOW")
dow <- tidyquant::tq_index("DOW")
dow
price_dat <- dow %>%
mutate(prices = map(symbol,tq_get))
library(dplyr)
price_dat <- dow %>%
mutate(prices = map(symbol,tq_get))
library(purrr)
dow <- tidyquant::tq_index("DOW")
price_dat <- dow %>%
mutate(prices = map(symbol,tq_get))
tq_get("AAPL")
dow %>%
nest_by(symbol)
price_dat <- dow %>%
nest_by(symbol) %>%
mutate(prices = map_dfr(~symbol,tq_get(.)))
dow
dow %>%
pull(symbol)
price_dat <- dow %>%
pull(symbol) %>%
imap_dfr(~{
tq_get(.x) %>%
add_column(symbol = .y)
})
price_dat <- dow %>%
pull(symbol) %>%
imap_dfr(~{
tq_get(.x) %>%
mutate(symbol = .y)
})
price_dat
price_dat <- dow %>%
pull(symbol) %>%
map_dfr(~{
tq_get(.x) %>%
mutate(symbol = .x)
})
price_dat <- dow %>%
pull(symbol) %>%
map_dfr( ~ {
dat <- tq_get(.x)
if (nrow(dat) > 0) {
ret_dat <- dat %>%
mutate(symbol = .x)
} else{
ret_dat <- tibble(symbol = .x)
}
ret_dat
})
price_dat
dow %>%
left_join(price_dat,by = "symbol")
install.packages("roll")
tidyquant::tq_get("AAPL") %>%
plotly::plot_ly(
x = ~date,
y = ~adjusted
) %>%
plotly::add_lines()
)
tidyquant::tq_get("AAPL") %>%
plotly::plot_ly(
x = ~date,
y = ~adjusted
) %>%
plotly::add_lines() %>%
plotly::layout(
title = ~glue::glue("example automated plot <br> updated last on {max(date,na.rm=TRUE)}")
)
tidyquant::tq_get("AAPL") %>%
plotly::plot_ly(
x = ~date,
y = ~adjusted
) %>%
plotly::add_lines() %>%
plotly::layout(
title = ~glue::glue("example automated plot <br> updated last on {Sys.Date()}")
)
install.packages("rmdformats")
## Global options
knitr::opts_chunk$set(cache = TRUE)
tidyquant::tq_get("AAPL") %>%
plotly::plot_ly(
x = ~date,
y = ~adjusted
) %>%
plotly::add_lines() %>%
plotly::layout(
title = ~glue::glue("example automated plot <br> updated last on {Sys.Date()}"),
)
highcharter:::hex_to_rgba("#2d39435e")
install.packages("highcharter")
highcharter:::hex_to_rgba("#2d39435e")
usethis::use_github()
gert::git_init()
usethis::use_github()
gert::git_add(".")
gert::git_commit_all("init")
git_config_global_set("user.name", "Zac Garland")
gert::git_config_global_set("user.email", "zachary.garland@outlook.com")
gert::git_config_global_set("user.name", "Zac Garland")
gert::git_config_global_set("user.email", "zachary.garland@outlook.com")
gert::git_commit_all("init")
usethis::use_github()
usethis::gh_token_help()
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::use_github()
usethis::use_github_actions
usethis::use_github_action("render-rmarkdown")
rmarkdown::render("inst/automated-report.Rmd")
rmarkdown::render("../inst/automated-report.Rmd")
rmarkdown::render(here::here("inst/automated-report.Rmd"))
gert::git_add(".")
gert::git_commit_all("updated with yaml")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("updated to docs folder")
gert::git_push()
rmarkdown::render("docs/automated-report/index.Rmd")
gert::git_add("mod to index")
gert::git_add(".")
gert::git_commit_all("rename rmd")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("added site yaml and move index rmd")
gert::git_push()
gert::git_add()
gert::git_add(".")
gert::git_commit_all("index mod")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("mod cron job to test")
gert::git_push()
dir.create("data")
Sys.time()
gert::git_add(".")
gert::git_commit_all("added writing data and sys time vs. sys date")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("updated yaml")
gert::git_push()
usethis::use_readme_rmd()
gert::git_add(".")
gert::git_commit_all("added readme")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("updated schedule")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("switch to macos and try installing libcurl directly")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("mod cron job to test")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("mod cron job to test")
gert::git_push()
file.choose()
clipr::read_clip()
usethis::use_logo(
"/Users/zg/Desktop/Screen Shot 2021-11-20 at 11.37.40 PM.png"
)
file.copy("/Users/zg/Desktop/Screen Shot 2021-11-20 at 11.37.40 PM.png","man/figures/preview.png")
gert::git_add(".")
gert::git_commit_all("added preview and updated cron to hr")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("mod cron t=3")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("escape string constant")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("testing macos")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("testing macos")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("cron t=25mins")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("cron t=25mins")
gert::git_push()
gert::git_fetch()
gert::git_pull()
gert::git_add(".")
gert::git_commit_all('added docs output dir')
gert::git_push()
Sys.time()
## Global options
knitr::opts_chunk$set(cache = FALSE,message = FALSE, warning = FALSE)
cur_date <- as.POSIXct(format(Sys.time()),tz="UTC")
cur_date <- as.POSIXct(format(Sys.time()),tz="UTC")
cur_date
cur_date <- Sys.time()
attr(cur_date,"tzone") <- "UTC"
cur_date
gert::git_add(".")
gert::git_commit_all("added in JS time diff")
gert::git_pull()
gert::git_add(".")
gert::git_commit_all("added in JS time diff")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("added in JS time diff")
gert::git_push()
gert::git_pull()
dat_tbl
dat_tbl <- tidyquant::tq_get("AAPL")
dat_tbl
dat_tbl %>% tail(1)
gert::git_add(".")
gert::git_commit_all("added table")
gert::git_push()
gert::git_add(".")
gert::git_commit_all("switched back to UTC")
gert::git_push()
cur_date <- Sys.time()
attr(cur_date,"tzone") <- "UTC"
cur_date
glue::glue("get_time_diff({cur_date})")
gert::git_pull()
gert::git_add(".")
gert::git_add(".")
gert::git_commit_all('cron ever hr')
gert::git_push()
gert::git_add(".")
gert::git_commit_all("ios js date fix")
gert::git_push()
golem::create_golem(path.expand("~/r_projects/gpt3.ui"))
install.packages("golem")
golem::create_golem(path.expand("~/r_projects/gpt3.ui"))
